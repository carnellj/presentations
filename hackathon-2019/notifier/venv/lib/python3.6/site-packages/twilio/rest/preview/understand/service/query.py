# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import deserialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class QueryList(ListResource):
    """ PLEASE NOTE that this class contains preview products that are subject
    to change. Use them with caution. If you currently do not have developer
    preview access, please contact help@twilio.com. """

    def __init__(self, version, service_sid):
        """
        Initialize the QueryList

        :param Version version: Version that contains the resource
        :param service_sid: The service_sid

        :returns: twilio.rest.preview.understand.service.query.QueryList
        :rtype: twilio.rest.preview.understand.service.query.QueryList
        """
        super(QueryList, self).__init__(version)

        # Path Solution
        self._solution = {'service_sid': service_sid, }
        self._uri = '/Services/{service_sid}/Queries'.format(**self._solution)

    def stream(self, language=values.unset, model_build=values.unset,
               status=values.unset, limit=None, page_size=None):
        """
        Streams QueryInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param unicode language: The language
        :param unicode model_build: The model_build
        :param unicode status: The status
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.preview.understand.service.query.QueryInstance]
        """
        limits = self._version.read_limits(limit, page_size)

        page = self.page(
            language=language,
            model_build=model_build,
            status=status,
            page_size=limits['page_size'],
        )

        return self._version.stream(page, limits['limit'], limits['page_limit'])

    def list(self, language=values.unset, model_build=values.unset,
             status=values.unset, limit=None, page_size=None):
        """
        Lists QueryInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param unicode language: The language
        :param unicode model_build: The model_build
        :param unicode status: The status
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.preview.understand.service.query.QueryInstance]
        """
        return list(self.stream(
            language=language,
            model_build=model_build,
            status=status,
            limit=limit,
            page_size=page_size,
        ))

    def page(self, language=values.unset, model_build=values.unset,
             status=values.unset, page_token=values.unset, page_number=values.unset,
             page_size=values.unset):
        """
        Retrieve a single page of QueryInstance records from the API.
        Request is executed immediately

        :param unicode language: The language
        :param unicode model_build: The model_build
        :param unicode status: The status
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryPage
        """
        params = values.of({
            'Language': language,
            'ModelBuild': model_build,
            'Status': status,
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(
            'GET',
            self._uri,
            params=params,
        )

        return QueryPage(self._version, response, self._solution)

    def get_page(self, target_url):
        """
        Retrieve a specific page of QueryInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryPage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url,
        )

        return QueryPage(self._version, response, self._solution)

    def create(self, language, query, intent=values.unset, model_build=values.unset,
               field=values.unset, named_entity=values.unset):
        """
        Create a new QueryInstance

        :param unicode language: The language
        :param unicode query: The query
        :param unicode intent: The intent
        :param unicode model_build: The model_build
        :param unicode field: The field
        :param unicode named_entity: The named_entity

        :returns: Newly created QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryInstance
        """
        data = values.of({
            'Language': language,
            'Query': query,
            'Intent': intent,
            'ModelBuild': model_build,
            'Field': field,
            'NamedEntity': named_entity,
        })

        payload = self._version.create(
            'POST',
            self._uri,
            data=data,
        )

        return QueryInstance(self._version, payload, service_sid=self._solution['service_sid'], )

    def get(self, sid):
        """
        Constructs a QueryContext

        :param sid: The sid

        :returns: twilio.rest.preview.understand.service.query.QueryContext
        :rtype: twilio.rest.preview.understand.service.query.QueryContext
        """
        return QueryContext(self._version, service_sid=self._solution['service_sid'], sid=sid, )

    def __call__(self, sid):
        """
        Constructs a QueryContext

        :param sid: The sid

        :returns: twilio.rest.preview.understand.service.query.QueryContext
        :rtype: twilio.rest.preview.understand.service.query.QueryContext
        """
        return QueryContext(self._version, service_sid=self._solution['service_sid'], sid=sid, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Preview.Understand.QueryList>'


class QueryPage(Page):
    """ PLEASE NOTE that this class contains preview products that are subject
    to change. Use them with caution. If you currently do not have developer
    preview access, please contact help@twilio.com. """

    def __init__(self, version, response, solution):
        """
        Initialize the QueryPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API
        :param service_sid: The service_sid

        :returns: twilio.rest.preview.understand.service.query.QueryPage
        :rtype: twilio.rest.preview.understand.service.query.QueryPage
        """
        super(QueryPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of QueryInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.preview.understand.service.query.QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryInstance
        """
        return QueryInstance(self._version, payload, service_sid=self._solution['service_sid'], )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Preview.Understand.QueryPage>'


class QueryContext(InstanceContext):
    """ PLEASE NOTE that this class contains preview products that are subject
    to change. Use them with caution. If you currently do not have developer
    preview access, please contact help@twilio.com. """

    def __init__(self, version, service_sid, sid):
        """
        Initialize the QueryContext

        :param Version version: Version that contains the resource
        :param service_sid: The service_sid
        :param sid: The sid

        :returns: twilio.rest.preview.understand.service.query.QueryContext
        :rtype: twilio.rest.preview.understand.service.query.QueryContext
        """
        super(QueryContext, self).__init__(version)

        # Path Solution
        self._solution = {'service_sid': service_sid, 'sid': sid, }
        self._uri = '/Services/{service_sid}/Queries/{sid}'.format(**self._solution)

    def fetch(self):
        """
        Fetch a QueryInstance

        :returns: Fetched QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryInstance
        """
        params = values.of({})

        payload = self._version.fetch(
            'GET',
            self._uri,
            params=params,
        )

        return QueryInstance(
            self._version,
            payload,
            service_sid=self._solution['service_sid'],
            sid=self._solution['sid'],
        )

    def update(self, sample_sid=values.unset, status=values.unset):
        """
        Update the QueryInstance

        :param unicode sample_sid: The sample_sid
        :param unicode status: The status

        :returns: Updated QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryInstance
        """
        data = values.of({'SampleSid': sample_sid, 'Status': status, })

        payload = self._version.update(
            'POST',
            self._uri,
            data=data,
        )

        return QueryInstance(
            self._version,
            payload,
            service_sid=self._solution['service_sid'],
            sid=self._solution['sid'],
        )

    def delete(self):
        """
        Deletes the QueryInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete('delete', self._uri)

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Preview.Understand.QueryContext {}>'.format(context)


class QueryInstance(InstanceResource):
    """ PLEASE NOTE that this class contains preview products that are subject
    to change. Use them with caution. If you currently do not have developer
    preview access, please contact help@twilio.com. """

    def __init__(self, version, payload, service_sid, sid=None):
        """
        Initialize the QueryInstance

        :returns: twilio.rest.preview.understand.service.query.QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryInstance
        """
        super(QueryInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'date_created': deserialize.iso8601_datetime(payload['date_created']),
            'date_updated': deserialize.iso8601_datetime(payload['date_updated']),
            'results': payload['results'],
            'language': payload['language'],
            'model_build_sid': payload['model_build_sid'],
            'query': payload['query'],
            'sample_sid': payload['sample_sid'],
            'service_sid': payload['service_sid'],
            'sid': payload['sid'],
            'status': payload['status'],
            'url': payload['url'],
        }

        # Context
        self._context = None
        self._solution = {'service_sid': service_sid, 'sid': sid or self._properties['sid'], }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: QueryContext for this QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryContext
        """
        if self._context is None:
            self._context = QueryContext(
                self._version,
                service_sid=self._solution['service_sid'],
                sid=self._solution['sid'],
            )
        return self._context

    @property
    def account_sid(self):
        """
        :returns: The account_sid
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def date_created(self):
        """
        :returns: The date_created
        :rtype: datetime
        """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """
        :returns: The date_updated
        :rtype: datetime
        """
        return self._properties['date_updated']

    @property
    def results(self):
        """
        :returns: The results
        :rtype: dict
        """
        return self._properties['results']

    @property
    def language(self):
        """
        :returns: The language
        :rtype: unicode
        """
        return self._properties['language']

    @property
    def model_build_sid(self):
        """
        :returns: The model_build_sid
        :rtype: unicode
        """
        return self._properties['model_build_sid']

    @property
    def query(self):
        """
        :returns: The query
        :rtype: unicode
        """
        return self._properties['query']

    @property
    def sample_sid(self):
        """
        :returns: The sample_sid
        :rtype: unicode
        """
        return self._properties['sample_sid']

    @property
    def service_sid(self):
        """
        :returns: The service_sid
        :rtype: unicode
        """
        return self._properties['service_sid']

    @property
    def sid(self):
        """
        :returns: The sid
        :rtype: unicode
        """
        return self._properties['sid']

    @property
    def status(self):
        """
        :returns: The status
        :rtype: unicode
        """
        return self._properties['status']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    def fetch(self):
        """
        Fetch a QueryInstance

        :returns: Fetched QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryInstance
        """
        return self._proxy.fetch()

    def update(self, sample_sid=values.unset, status=values.unset):
        """
        Update the QueryInstance

        :param unicode sample_sid: The sample_sid
        :param unicode status: The status

        :returns: Updated QueryInstance
        :rtype: twilio.rest.preview.understand.service.query.QueryInstance
        """
        return self._proxy.update(sample_sid=sample_sid, status=status, )

    def delete(self):
        """
        Deletes the QueryInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._proxy.delete()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Preview.Understand.QueryInstance {}>'.format(context)
